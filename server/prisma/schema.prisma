generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model follow {
  id                             Int       @id @default(autoincrement())
  userid                         Int?
  followerid                     Int?
  followdate                     DateTime? @db.Date
  users_follow_followeridTousers users?    @relation("follow_followeridTousers", fields: [followerid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_follow_useridTousers     users?    @relation("follow_useridTousers", fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profile {
  id       Int        @id @default(autoincrement())
  userid   Int?       @unique
  bio      String?
  username String     @db.VarChar(30) @unique
  imgurl   String?    @db.VarChar(200)
  users    users?     @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments comments[]
  likes    likes[]
  posts    posts[]
  @@index(userid)
}

model users {
  id                              Int      @id @default(autoincrement())
  name                            String   @db.VarChar(30)
  password                        String   @db.VarChar(120)
  email                           String   @unique @db.VarChar(80)
  follow_follow_followeridTousers follow[] @relation("follow_followeridTousers")
  follow_follow_useridTousers     follow[] @relation("follow_useridTousers")
  profile                         profile?
  
}

model imgs {
  id     Int    @id @default(autoincrement())
  imgurl String @unique
}

model comments {
  id        Int       @id @default(autoincrement())
  msg       String?
  profileid Int?
  postid    Int?
  datepost  DateTime? @db.Date
  posts     posts?    @relation(fields: [postid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profile   profile?  @relation(fields: [profileid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@index(postid)
}

model likes {
  id        Int       @id @default(autoincrement())
  profileid Int?
  postid    Int?
  datepost  DateTime?  @db.Date
  posts     posts?    @relation(fields: [postid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profile   profile?  @relation(fields: [profileid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@index(postid)
}

model posts {
  id        Int        @id @default(autoincrement())
  src       String     @db.VarChar(200)
  profileid Int?
  datepost  DateTime?  @db.Date
  profile   profile?   @relation(fields: [profileid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments  comments[]
  likes     likes[]
  @@index(profileid)
}
